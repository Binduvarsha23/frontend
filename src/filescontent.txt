import express from 'express';
import mongoose from 'mongoose';
import dotenv from 'dotenv';
import cors from 'cors';

import blocksRoute from './routes/blocks.js';
import blockFieldsRoute from './routes/blockFields.js';
import saveFormRoute from './routes/saveForm.js';
import savedFormsRoute from './routes/savedForms.js';

dotenv.config();

const app = express();

// Middleware
app.use(cors());
app.use(express.json());

// Connect to MongoDB
mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
  // useFindAndModify and useCreateIndex are no longer supported in latest mongoose versions,
  // so no need to add them
});

mongoose.connection.once('open', () => {
  console.log('✅ Connected to MongoDB');
});

mongoose.connection.on('error', (err) => {
  console.error('❌ MongoDB connection error:', err);
});

// API Routes
app.use('/api/blocks', blocksRoute);
app.use('/api/block-fields', blockFieldsRoute);
app.use('/api/save-form', saveFormRoute);
app.use('/api/saved-forms', savedFormsRoute);


// Default fallback route (optional)
app.use((req, res) => {
  res.status(404).json({ error: 'Route not found' });
});

// Start server
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`🚀 Server running on http://localhost:${PORT}`);
});   this is my server.js, backend\models\BlockMetadata.js : import mongoose from 'mongoose';

const { Schema } = mongoose;

const BlockMetadataSchema = new Schema({
  name: { type: String, required: true, unique: true },
  iconUrl: { type: String, required:true },
  data_collection_name: { type: String, required:true },
});

export default mongoose.model('BlockMetadata', BlockMetadataSchema);  backend\models\FormData.js : import mongoose from 'mongoose';

const formDataSchema = new mongoose.Schema({
  userId: { type: String, required: true }, // ✅ Add userId
  blockId: { type: mongoose.Schema.Types.ObjectId, ref: 'BlockMetadata', required: true },
  blockName: { type: String, required: true },
  data: { type: mongoose.Schema.Types.Mixed },
  createdAt: { type: Date, default: Date.now },
});

export default mongoose.model('FormData', formDataSchema);  , backend\routes\blockFields.js : import express from 'express';
import mongoose from 'mongoose';
import BlockMetadata from '../models/BlockMetadata.js';

const router = express.Router();

// GET /api/block-fields/:blockId
router.get('/:blockId', async (req, res) => {
  const { blockId } = req.params;

  try {
    const block = await BlockMetadata.findById(blockId);
    if (!block || !block.data_collection_name) {
      return res.status(404).json({ error: "Block or data_collection_name not found" });
    }

    const collectionName = block.data_collection_name;
    const db = mongoose.connection.db;
    const collection = db.collection(collectionName);

    // Assuming there's one document with all the fields
    const doc = await collection.findOne();
    if (!doc) {
      return res.status(404).json({ error: "No field document found in this collection" });
    }

    // Optionally exclude _id
    const { _id, ...fields } = doc;

    res.json(fields); // 👈 Sends to frontend
  } catch (err) {
    console.error("❌ Error fetching block fields:", err.message);
    res.status(500).json({ error: err.message });
  }
});

export default router;   backend\routes\blocks.js : import express from 'express';
import BlockMetadata from '../models/BlockMetadata.js';

const router = express.Router();

router.get('/', async (req, res) => {
  try {
    const blocks = await BlockMetadata.find();
    res.json(blocks);
  } catch (err) {
    console.error("❌ Error fetching blocks:", err.message);
    res.status(500).json({ error: err.message });
  }
});

export default router;   backend\routes\savedForms.js : import express from 'express';
import FormData from '../models/FormData.js';

const router = express.Router();

// GET /api/saved-forms/:blockId?userId=xyz
router.get('/:blockId', async (req, res) => {
  const { userId } = req.query;

  if (!userId) {
    return res.status(400).json({ error: "Missing userId in query params" });
  }

  try {
    const forms = await FormData.find({
      blockId: req.params.blockId,
      userId,
    }).sort({ createdAt: -1 });

    res.json(forms);
  } catch (error) {
    console.error("Error fetching saved forms:", error);
    res.status(500).json({ error: 'Server error fetching saved forms' });
  }
});

export default router;   backend\routes\saveForm.js : import express from 'express';
import FormData from '../models/FormData.js';

const router = express.Router();

// POST /api/save-form
router.post('/', async (req, res) => {
  const { blockId, blockName, data, userId } = req.body;

  if (!blockId || !blockName || !userId) {
    return res.status(400).json({ error: "Missing required fields" });
  }

  try {
    const newForm = new FormData({
      blockId,
      blockName,
      data,
      userId,
    });

    const saved = await newForm.save();
    res.status(201).json(saved);
  } catch (error) {
    console.error("Error saving form data:", error);
    res.status(500).json({ error: "Server error saving form data" });
  }
});

export default router;   src\components\Dashboard.js: import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import { signOut } from "firebase/auth";
import { auth } from "../firebase";
import {
  Card,
  Container,
  Row,
  Col,
  Button,
  Spinner,
  Form,
  Alert,
  Table,
  Carousel,
} from "react-bootstrap";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

export default function Dashboard() {
  const [blocks, setBlocks] = useState([]);
  const [loading, setLoading] = useState(true);
  const [selectedBlockFields, setSelectedBlockFields] = useState(null);
  const [selectedBlockName, setSelectedBlockName] = useState("");
  const [selectedBlockId, setSelectedBlockId] = useState(null);
  const [formData, setFormData] = useState({});
  const [formSubmitted, setFormSubmitted] = useState(false);
  const [savedForms, setSavedForms] = useState([]);
  const [loadingSavedForms, setLoadingSavedForms] = useState(false);
  const [recentUploads, setRecentUploads] = useState([]);
  const [showAllRecent, setShowAllRecent] = useState(false);
  const [carouselIndex, setCarouselIndex] = useState(0);

  const navigate = useNavigate();

  const optionalFields = ["masked", "qrcode", "withdrawalstatus", "enddateif"];
  const user = auth.currentUser;
  const userId = user?.uid;

  const isYesNoField = (key) => {
    const k = key.toLowerCase();
    return k.startsWith("yes") || k.endsWith("yes_no") || k.includes("yesno");
  };

  const getInputType = (key) => {
    const k = key.toLowerCase();
    if (k.includes("dob") || k.includes("date")) return "date";
    if (k.includes("phone") || k.includes("mobile") || k.includes("number"))
      return "number";
    if (
      k.includes("image") ||
      k.includes("upload") ||
      k.includes("file") ||
      k.includes("pdf")
    )
      return "file";
    return "text";
  };

  const convertFileToBase64 = (file) => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.readAsDataURL(file);
      reader.onload = () => resolve(reader.result);
      reader.onerror = (error) => reject(error);
    });
  };

  useEffect(() => {
    // Fetch blocks on load
    fetch("http://localhost:5000/api/blocks")
      .then((res) => res.json())
      .then((data) => {
        setBlocks(data);
        toast.success("Blocks loaded successfully!", { autoClose: 2000 });
        fetchRecentUploads(data);
      })
      .catch((err) => {
        console.error("Error fetching blocks:", err);
        toast.error("Failed to load blocks. Please try again.", {
          autoClose: 3000,
        });
      })
      .finally(() => setLoading(false));
  }, []);

  const fetchRecentUploads = async (blocksData) => {
    try {
      // Aggregate all saved forms from all blocks for this user
      let allForms = [];

      for (const block of blocksData) {
        const res = await fetch(
          `http://localhost:5000/api/saved-forms/${block._id}?userId=${userId}`
        );
        if (!res.ok) {
          console.warn(`Failed to fetch saved forms for block ${block.name}`);
          continue;
        }
        const forms = await res.json();
        // Add block info to each form
        const formsWithBlock = forms.map((f) => ({
          ...f,
          blockName: block.name,
        }));
        allForms = allForms.concat(formsWithBlock);
      }

      // Sort allForms by createdAt descending (most recent first)
      allForms.sort(
        (a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
      );

      // Extract files from data fields and build a list of recent file uploads
      let uploads = [];

      for (const form of allForms) {
        // Each form data is an object, find keys where the value is a base64 string (file)
        for (const [key, value] of Object.entries(form.data)) {
          if (typeof value === "string" && value.startsWith("data:")) {
            uploads.push({
              formId: form._id,
              blockName: form.blockName,
              fieldName: key,
              fileData: value,
              submittedAt: form.createdAt,
            });
          }
        }
      }

      // Take last 10 uploads max
      uploads = uploads.slice(0, 10);
      setRecentUploads(uploads);
      setShowAllRecent(false);
      setCarouselIndex(0);
    } catch (error) {
      console.error("Error fetching recent uploads:", error);
      toast.error("Failed to load recent uploads.");
    }
  };

  const handleLogout = async () => {
    await signOut(auth);
    navigate("/");
  };

  const handleBlockClick = async (block) => {
    try {
      const res = await fetch(
        `http://localhost:5000/api/block-fields/${block._id}`
      );
      if (!res.ok) throw new Error("Failed to fetch block fields");
      const fields = await res.json();

      setSelectedBlockFields(fields);
      setSelectedBlockName(block.name);
      setSelectedBlockId(block._id);

      const init = {};
      Object.keys(fields).forEach((key) => (init[key] = ""));
      setFormData(init);
      setFormSubmitted(false);

      fetchSavedForms(block._id);
    } catch (err) {
      console.error(err);
      toast.error("Failed to load fields for this block");
    }
  };

  const fetchSavedForms = async (blockId) => {
    setLoadingSavedForms(true);
    try {
      const res = await fetch(
        `http://localhost:5000/api/saved-forms/${blockId}?userId=${userId}`
      );
      if (!res.ok) throw new Error("Failed to fetch saved forms");
      const data = await res.json();
      setSavedForms(data);
    } catch (error) {
      console.error(error);
      toast.error("Error loading saved form data");
      setSavedForms([]);
    } finally {
      setLoadingSavedForms(false);
    }
  };

  const handleChange = (e, key) => {
    const value = e.target.type === "file" ? e.target.files[0] : e.target.value;
    setFormData((prev) => ({ ...prev, [key]: value }));
  };

  const renderInputField = (key, label) => {
    const type = getInputType(key);

    if (key.toLowerCase().includes("gender")) {
      return (
        <Form.Select value={formData[key]} onChange={(e) => handleChange(e, key)}>
          <option value="">Select Gender</option>
          <option value="Male">Male</option>
          <option value="Female">Female</option>
          <option value="Other">Other</option>
        </Form.Select>
      );
    }

    if (isYesNoField(key)) {
      return (
        <div>
          <Form.Check
            inline
            label="Yes"
            name={key}
            type="radio"
            value="Yes"
            checked={formData[key] === "Yes"}
            onChange={(e) => handleChange(e, key)}
          />
          <Form.Check
            inline
            label="No"
            name={key}
            type="radio"
            value="No"
            checked={formData[key] === "No"}
            onChange={(e) => handleChange(e, key)}
          />
        </div>
      );
    }

    if (type === "file") {
      return <Form.Control type="file" onChange={(e) => handleChange(e, key)} accept="*/*" />;
    }

    return (
      <Form.Control type={type} value={formData[key]} onChange={(e) => handleChange(e, key)} />
    );
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    const missingFields = Object.entries(selectedBlockFields).filter(
      ([key]) => !optionalFields.includes(key) && !formData[key]
    );

    if (missingFields.length > 0) {
      toast.error("Please fill in all required fields.");
      setFormSubmitted(false);
      return;
    }

    try {
      const cleanedData = {};

      for (const [key, value] of Object.entries(formData)) {
        if (value instanceof File) {
          cleanedData[key] = await convertFileToBase64(value);
        } else {
          cleanedData[key] = value;
        }
      }

      const res = await fetch("http://localhost:5000/api/save-form", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          blockId: selectedBlockId,
          blockName: selectedBlockName,
          data: cleanedData,
          userId,
        }),
      });

      const result = await res.json();

      if (!res.ok) {
        console.error("❌ Server error:", result);
        throw new Error(result.error || "Unknown error");
      }

      toast.success("✅ Form submitted successfully!");
      setFormSubmitted(true);
      setFormData({});
      fetchSavedForms(selectedBlockId);

      // Refresh recent uploads on new upload
      fetchRecentUploads(blocks);
    } catch (error) {
      console.error("❌ Submit error:", error);
      toast.error("Failed to submit form data.");
      setFormSubmitted(false);
    }
  };

  const handleToggleRecent = () => {
    setShowAllRecent((prev) => !prev);
    setCarouselIndex(0);
  };

  const handleSelectCarousel = (selectedIndex) => {
    setCarouselIndex(selectedIndex);
  };

  // ** NEW: Render file preview inline for images and PDFs **
  const renderFilePreview = (fileData) => {
    if (!fileData) return null;

    if (fileData.startsWith("data:image")) {
      return (
        <img
          src={fileData}
          alt="Uploaded preview"
          style={{ maxWidth: "100%", maxHeight: "150px", objectFit: "contain" }}
        />
      );
    }

    if (fileData.startsWith("data:application/pdf")) {
      return (
        <iframe
          src={fileData}
          style={{ width: "100%", height: "150px", border: "none" }}
          title="PDF Preview"
        />
      );
    }

    return (
      <a href={fileData} target="_blank" rel="noopener noreferrer">
        View File
      </a>
    );
  };

  return (
    <Container className="py-4">
      <ToastContainer />
      <div className="d-flex justify-content-between align-items-center mb-4">
        <h2>📁 Your Document Blocks</h2>
        <Button variant="danger" onClick={handleLogout}>
          Logout
        </Button>
      </div>

      {/* Recent Uploads Section */}
      <div className="mb-4">
        <h4>📂 Recent Uploads</h4>
        {recentUploads.length === 0 ? (
          <p>No recent uploads found.</p>
        ) : (
          <>
            {!showAllRecent ? (
              <Row>
                {recentUploads.slice(0, 4).map((upload) => (
                  <Col
                    key={`${upload.formId}-${upload.fieldName}`}
                    xs={12}
                    sm={6}
                    md={3}
                    className="mb-3"
                  >
                    <Card className="h-100 shadow-sm">
                      <Card.Body>
                        <Card.Title style={{ fontSize: "1rem" }}>
                          {upload.blockName}
                        </Card.Title>
                        <Card.Text
                          style={{ fontSize: "0.85rem", wordBreak: "break-word" }}
                        >
                          {upload.fieldName}
                        </Card.Text>
                        <div>{renderFilePreview(upload.fileData)}</div>
                      </Card.Body>
                    </Card>
                  </Col>
                ))}
              </Row>
            ) : (
              <Carousel
                activeIndex={carouselIndex}
                onSelect={handleSelectCarousel}
                interval={null}
                indicators={false}
                prevLabel="Previous"
                nextLabel="Next"
              >
                {recentUploads.map((upload) => (
                  <Carousel.Item
                    key={`${upload.formId}-${upload.fieldName}`}
                  >
                    <Card className="mx-auto" style={{ maxWidth: "400px" }}>
                      <Card.Body>
                        <Card.Title>{upload.blockName}</Card.Title>
                        <Card.Text style={{ wordBreak: "break-word" }}>
                          {upload.fieldName}
                        </Card.Text>
                        <div>{renderFilePreview(upload.fileData)}</div>
                        <div
                          className="text-muted mt-2"
                          style={{ fontSize: "0.8rem" }}
                        >
                          Uploaded: {new Date(upload.submittedAt).toLocaleString()}
                        </div>
                      </Card.Body>
                    </Card>
                  </Carousel.Item>
                ))}
              </Carousel>
            )}
            <Button variant="link" onClick={handleToggleRecent} className="p-0 mt-2">
              {showAllRecent
                ? `Show Less`
                : `View All (${recentUploads.length})`}
            </Button>
          </>
        )}
      </div>

      {/* Blocks List */}
      {loading ? (
        <Spinner animation="border" />
      ) : (
        <Row>
          {blocks.map((block) => (
            <Col
              key={block._id}
              xs={12}
              md={4}
              className="mb-3"
              style={{ cursor: "pointer" }}
              onClick={() => handleBlockClick(block)}
            >
             <Card
                className="h-100 shadow-sm"
                onClick={() => handleBlockClick(block)}
                style={{ cursor: "pointer" }}
              >
                <Card.Body className="d-flex align-items-center">
                  <img
                    src={block.iconUrl}
                    alt={block.name}
                    style={{
                      width: "40px",
                      height: "40px",
                      objectFit: "contain",
                      marginRight: "15px",
                    }}
                  />
                  <Card.Title className="mb-0">{block.name}</Card.Title>
                </Card.Body>
              </Card>
            </Col>
          ))}
        </Row>
      )}

      {/* Form and saved data for selected block */}
      {selectedBlockFields && (
        <div className="mt-5">
          <h3>Form for Block: {selectedBlockName}</h3>
          <Form onSubmit={handleSubmit}>
            {Object.entries(selectedBlockFields).map(([key, label]) => (
              <Form.Group
                key={key}
                className="mb-3"
                controlId={`form_${key}`}
              >
                <Form.Label>{label}</Form.Label>
                {renderInputField(key, label)}
              </Form.Group>
            ))}
            <Button type="submit" disabled={formSubmitted}>
              Submit
            </Button>
          </Form>

          <hr />

          <h4>Saved Form Data</h4>
          {loadingSavedForms ? (
            <Spinner animation="border" />
          ) : savedForms.length === 0 ? (
            <p>No saved form data found.</p>
          ) : (
            <Table striped bordered hover responsive>
              <thead>
                <tr>
                  {Object.keys(savedForms[0].data).map((key) => (
                    <th key={key}>{key}</th>
                  ))}
                </tr>
              </thead>
              <tbody>
                {savedForms.map((form) => (
                  <tr key={form._id}>
                    {Object.keys(form.data).map((key) => (
                      <td key={key} style={{ maxWidth: "150px", wordBreak: "break-word" }}>
                        {typeof form.data[key] === "string" &&
                        form.data[key].startsWith("data:") ? (
                          renderFilePreview(form.data[key])
                        ) : (
                          form.data[key]
                        )}
                      </td>
                    ))}
                  </tr>
                ))}
              </tbody>
            </Table>
          )}
        </div>
      )}
    </Container>
  );
}
